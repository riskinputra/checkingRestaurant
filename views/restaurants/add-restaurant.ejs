<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Searchbox</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css">
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.3.0/material.indigo-pink.min.css">

    <style>
      #map {
        height: 300px;
      }

      html, body {
        margin: 0;
        padding: 0;
      }

      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px;
        box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      .mdl-card {
        height: 200px;
        width: 100%;
        text-decoration: none; }
      .mdl-textfield {
        margin: 0 16px; }
      .mdl-button {
        top: 10px;
        left: 170px; }
    </style>
  </head>

  <body>
    <!-- Always shows a header, even in smaller screens. -->
    <div class="mdl-layout mdl-js-layout mdl-layout--fixed-drawer mdl-layout--fixed-header">
      <header class="mdl-layout__header">
        <div class="mdl-layout__header-row">
          <!-- Title -->
          <span class="mdl-layout-title">Edit Restaurants</span>
        </div>
      </header>
      <div class="mdl-layout__drawer">
        <nav class="mdl-navigation">
          <a class="mdl-navigation__link" href="/restaurants">
            <i class="material-icons">restaurant_menu</i>
            &nbsp;&nbsp;Home
          </a>
        </nav>
      </div>
      <main class="mdl-layout__content">
        <div class="page-content">
          <div class="mdl-grid mdl-grid--no-spacing">
            <div class="mdl-cell mdl-cell--12-col-phone mdl-cell--12-col-desktop">
              <div class="mdl-card mdl-shadow--2dp map">
                <div id="map"></div>
                <input id="pac-input" class="controls" type="text" placeholder="Search Location">
              </div>
            </div>
          </div>
          <div class="mdl-grid">
            <div class="mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col-phone mdl-cell--4-col-desktop">
              <div class="mdl-card__title">
                <h4 class="mdl-card__title-text">Details</h4>
              </div>
              <form method="post">
                <div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label">
                  <input class="mdl-textfield__input" type="text" id="name" name="name">
                  <label class="mdl-textfield__label" for="name">Restaurant Name</label>
                </div>
                <input type="hidden" name="address" id="address">
                <input type="hidden" name="latlng" id="latlng">
                <input type="hidden" name="territory" id="territory">
                <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored mdl-js-ripple-effect">
                  Add Restaurant
                </button>
              </form>
            </div>
          </div>
        </div>
      </main>
    </div>

    <script>
      let lat = ''
      let lng = ''

      var options = {
        enableHighAccuracy: true,
        timeout: 5000,
        maximumAge: 0
      };

      function success(pos) {
        const coords = pos.coords;
        lat = coords.latitude
        lng = coords.longitude
      };

      function error(err) {
        console.warn(`ERROR(${err.code}): ${err.message}`);
      };

      navigator.geolocation.getCurrentPosition(success, error, options);

      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: +lat, lng: +lng},
          zoom: 16,
          disableDefaultUI: true
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }

            place.address_components.forEach(each => {
              if (each.types[0] === 'administrative_area_level_3') {
                document.getElementById('territory').value = each.long_name
              }
            })

            document.getElementById('latlng').value = place.geometry.location
            document.getElementById('address').value = place.formatted_address

            var icon = {
              url: 'https://cdn1.iconfinder.com/data/icons/google_jfk_icons_by_carlosjj/512/places.png',
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiugJ3SlFq_kckpVflKcSqm_hlfxeYbT8&libraries=places&callback=initAutocomplete"
         async defer></script>
    <script defer src="https://code.getmdl.io/1.3.0/material.min.js"></script>
  </body>
</html>