<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Searchbox</title>
    <style>
      #map {
        height: 300px;
      }

      html, body {
        margin: 0;
        padding: 0;
      }

      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px;
        box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 300px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      form {
        position: absolute;
      }

      .input-restaurant {
        position: relative;
        top: 320px;
      }

      .add-restaurant {
        position: relative;
        top: 330px;
      }
    </style>
  </head>

  <body>
    <form method="post">
      <input id="pac-input" class="controls" type="text" placeholder="Search Location">
      <input type="text" name="name" class="input-restaurant" placeholder="Restaurant Name">
      <input type="hidden" name="latlng" id="latlng">
      <input type="hidden" name="address" id="address">
      <button class="add-restaurant">ADD RESTAURANT</button>
    </form>

    <div id="map"></div>

    <script>
      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -6.260700, lng: 106.781648},
          zoom: 16,
          disableDefaultUI: true
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }

            document.getElementById('latlng').value = place.geometry.location
            document.getElementById('address').value = place.formatted_address

            var icon = {
              url: 'https://cdn1.iconfinder.com/data/icons/google_jfk_icons_by_carlosjj/512/places.png',
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiugJ3SlFq_kckpVflKcSqm_hlfxeYbT8&libraries=places&callback=initAutocomplete"
         async defer></script>
  </body>
</html>